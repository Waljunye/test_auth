// Code generated by MockGen. DO NOT EDIT.
// Source: ./cmd/deps.go
//
// Generated by this command:
//
//	mockgen -source=./cmd/deps.go -destination=./cmd/cmd_mocks.go -package=main
//

// Package main is a generated GoMock package.
package main

import (
	os "os"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// Mockapp is a mock of app interface.
type Mockapp struct {
	ctrl     *gomock.Controller
	recorder *MockappMockRecorder
}

// MockappMockRecorder is the mock recorder for Mockapp.
type MockappMockRecorder struct {
	mock *Mockapp
}

// NewMockapp creates a new mock instance.
func NewMockapp(ctrl *gomock.Controller) *Mockapp {
	mock := &Mockapp{ctrl: ctrl}
	mock.recorder = &MockappMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockapp) EXPECT() *MockappMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *Mockapp) Run(stopChan chan os.Signal) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", stopChan)
}

// Run indicates an expected call of Run.
func (mr *MockappMockRecorder) Run(stopChan any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*Mockapp)(nil).Run), stopChan)
}
