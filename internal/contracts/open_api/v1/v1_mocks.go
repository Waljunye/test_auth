// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/contracts/open_api/v1/deps.go
//
// Generated by this command:
//
//	mockgen -source=./internal/contracts/open_api/v1/deps.go -destination=./internal/contracts/open_api/v1/v1_mocks.go -package=v1
//

// Package v1 is a generated GoMock package.
package v1

import (
	domain "auth/internal/domain"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockauthService is a mock of authService interface.
type MockauthService struct {
	ctrl     *gomock.Controller
	recorder *MockauthServiceMockRecorder
}

// MockauthServiceMockRecorder is the mock recorder for MockauthService.
type MockauthServiceMockRecorder struct {
	mock *MockauthService
}

// NewMockauthService creates a new mock instance.
func NewMockauthService(ctrl *gomock.Controller) *MockauthService {
	mock := &MockauthService{ctrl: ctrl}
	mock.recorder = &MockauthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockauthService) EXPECT() *MockauthServiceMockRecorder {
	return m.recorder
}

// Refresh mocks base method.
func (m *MockauthService) Refresh(ctx context.Context, oldRefreshToken string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", ctx, oldRefreshToken)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Refresh indicates an expected call of Refresh.
func (mr *MockauthServiceMockRecorder) Refresh(ctx, oldRefreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockauthService)(nil).Refresh), ctx, oldRefreshToken)
}

// SignIn mocks base method.
func (m *MockauthService) SignIn(ctx context.Context, username, password string) (string, string, domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", ctx, username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(domain.User)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// SignIn indicates an expected call of SignIn.
func (mr *MockauthServiceMockRecorder) SignIn(ctx, username, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockauthService)(nil).SignIn), ctx, username, password)
}

// SignUp mocks base method.
func (m *MockauthService) SignUp(ctx context.Context, username, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", ctx, username, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignUp indicates an expected call of SignUp.
func (mr *MockauthServiceMockRecorder) SignUp(ctx, username, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockauthService)(nil).SignUp), ctx, username, password)
}
