// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/services/deps.go
//
// Generated by this command:
//
//	mockgen -source=./internal/services/deps.go -destination=./internal/services/services_mocks.go -package=services
//

// Package services is a generated GoMock package.
package services

import (
	domain "auth/internal/domain"
	context "context"
	rsa "crypto/rsa"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockusersStore is a mock of usersStore interface.
type MockusersStore struct {
	ctrl     *gomock.Controller
	recorder *MockusersStoreMockRecorder
}

// MockusersStoreMockRecorder is the mock recorder for MockusersStore.
type MockusersStoreMockRecorder struct {
	mock *MockusersStore
}

// NewMockusersStore creates a new mock instance.
func NewMockusersStore(ctrl *gomock.Controller) *MockusersStore {
	mock := &MockusersStore{ctrl: ctrl}
	mock.recorder = &MockusersStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockusersStore) EXPECT() *MockusersStoreMockRecorder {
	return m.recorder
}

// ByUid mocks base method.
func (m *MockusersStore) ByUid(ctx context.Context, uid string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByUid", ctx, uid)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByUid indicates an expected call of ByUid.
func (mr *MockusersStoreMockRecorder) ByUid(ctx, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByUid", reflect.TypeOf((*MockusersStore)(nil).ByUid), ctx, uid)
}

// ByUsername mocks base method.
func (m *MockusersStore) ByUsername(ctx context.Context, username string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByUsername", ctx, username)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByUsername indicates an expected call of ByUsername.
func (mr *MockusersStoreMockRecorder) ByUsername(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByUsername", reflect.TypeOf((*MockusersStore)(nil).ByUsername), ctx, username)
}

// Create mocks base method.
func (m *MockusersStore) Create(ctx context.Context, user domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockusersStoreMockRecorder) Create(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockusersStore)(nil).Create), ctx, user)
}

// MockauthServiceConfig is a mock of authServiceConfig interface.
type MockauthServiceConfig struct {
	ctrl     *gomock.Controller
	recorder *MockauthServiceConfigMockRecorder
}

// MockauthServiceConfigMockRecorder is the mock recorder for MockauthServiceConfig.
type MockauthServiceConfigMockRecorder struct {
	mock *MockauthServiceConfig
}

// NewMockauthServiceConfig creates a new mock instance.
func NewMockauthServiceConfig(ctrl *gomock.Controller) *MockauthServiceConfig {
	mock := &MockauthServiceConfig{ctrl: ctrl}
	mock.recorder = &MockauthServiceConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockauthServiceConfig) EXPECT() *MockauthServiceConfigMockRecorder {
	return m.recorder
}

// AccessTokenExpires mocks base method.
func (m *MockauthServiceConfig) AccessTokenExpires() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessTokenExpires")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// AccessTokenExpires indicates an expected call of AccessTokenExpires.
func (mr *MockauthServiceConfigMockRecorder) AccessTokenExpires() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessTokenExpires", reflect.TypeOf((*MockauthServiceConfig)(nil).AccessTokenExpires))
}

// HashKey mocks base method.
func (m *MockauthServiceConfig) HashKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// HashKey indicates an expected call of HashKey.
func (mr *MockauthServiceConfigMockRecorder) HashKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashKey", reflect.TypeOf((*MockauthServiceConfig)(nil).HashKey))
}

// PrivateKey mocks base method.
func (m *MockauthServiceConfig) PrivateKey() *rsa.PrivateKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivateKey")
	ret0, _ := ret[0].(*rsa.PrivateKey)
	return ret0
}

// PrivateKey indicates an expected call of PrivateKey.
func (mr *MockauthServiceConfigMockRecorder) PrivateKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivateKey", reflect.TypeOf((*MockauthServiceConfig)(nil).PrivateKey))
}

// PublicKey mocks base method.
func (m *MockauthServiceConfig) PublicKey() *rsa.PublicKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicKey")
	ret0, _ := ret[0].(*rsa.PublicKey)
	return ret0
}

// PublicKey indicates an expected call of PublicKey.
func (mr *MockauthServiceConfigMockRecorder) PublicKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicKey", reflect.TypeOf((*MockauthServiceConfig)(nil).PublicKey))
}

// RefreshTokenExpires mocks base method.
func (m *MockauthServiceConfig) RefreshTokenExpires() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshTokenExpires")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// RefreshTokenExpires indicates an expected call of RefreshTokenExpires.
func (mr *MockauthServiceConfigMockRecorder) RefreshTokenExpires() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshTokenExpires", reflect.TypeOf((*MockauthServiceConfig)(nil).RefreshTokenExpires))
}

// Salt mocks base method.
func (m *MockauthServiceConfig) Salt() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Salt")
	ret0, _ := ret[0].(int)
	return ret0
}

// Salt indicates an expected call of Salt.
func (mr *MockauthServiceConfigMockRecorder) Salt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Salt", reflect.TypeOf((*MockauthServiceConfig)(nil).Salt))
}
